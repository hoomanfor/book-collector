{"version":3,"sources":["components/pages/Search.js","App.js","registerServiceWorker.js","index.js"],"names":["Search","state","results","search","handleInputChange","event","_this","setState","Object","defineProperty","target","name","value","searchForBooks","preventDefault","split","join","axios","get","then","response","console","log","data","items","react_default","a","createElement","className","type","placeholder","onChange","this","onClick","disabled","length","map","book","key","id","volumeInfo","title","authors","concat","href","infoLink","rel","alt","src","imageLinks","thumbnail","description","React","Component","App","react_router_dom","react_router","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.d070d02a.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\n\nclass Search extends React.Component {\n    state = {\n        results: [],\n        search: \"\"\n    };\n\n    handleInputChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    };\n\n    searchForBooks = (event) => {\n        event.preventDefault();\n        const search = this.state.search.split(\" \").join(\"+\");\n        axios.get(\"/api/search?q=\" + search).then((response) => {\n            console.log(response.data.items)\n            this.setState({\n                results: response.data.items,\n                search: \"\"\n            })\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"jumbotron jumbotron-fluid\">\n                    <div className=\"container\">\n                        <h1 className=\"display-4\">Book Collector</h1>\n                        <p className=\"lead\">MERN stack (MongoDB, Express.js, React.js, and Node.js)</p>\n                        <form>\n                        <div className=\"input-group\">\n                            <input \n                                type=\"text\" \n                                className=\"form-control\" \n                                placeholder=\"Search a Book Title, Author Name, or Topic\" \n                                onChange={this.handleInputChange} \n                                name=\"search\" \n                                value={this.state.search} \n                            />\n                            <div className=\"input-group-append\">\n                                <button \n                                    className=\"btn btn-outline-primary\" \n                                    type=\"submit\" \n                                    onClick={this.searchForBooks} \n                                    disabled={!(this.state.search)}>Search\n                                </button>\n                            </div>\n                        </div>\n                        </form>\n                    </div>\n                </div>\n                <div className=\"container border\">\n                    <h2 className=\"border\">{this.state.results.length ? \"Results:\" : \"Search for Books!\"}</h2>\n                        {this.state.results.map(book => (\n                            <div key={book.id} className=\"container\">\n                                <div className=\"row\">\n                                    <div className=\"col-8 border\">\n                                        <h3>{book.volumeInfo.title}</h3>\n                                        <p>{book.volumeInfo.authors ? `Written by ${book.volumeInfo.authors.join(\", \")}` : \"\"}</p>\n                                    </div>\n                                    <div className=\"col-4 border text-right\">\n                                        <a href={book.volumeInfo.infoLink} target=\"_blank\" rel=\"noopener noreferrer\">View</a> <a href=\"/save\">Save</a>\n                                    </div>\n                                </div>\n                                <div className=\"row\">\n                                    <div className=\"col-2 text-center border\">\n                                        <img alt={book.volumeInfo.title} src={book.volumeInfo.imageLinks ? book.volumeInfo.imageLinks.thumbnail : \"https://via.placeholder.com/130x190?text=No+Book+Cover\"} />\n                                    </div>\n                                    <div className=\"col-10 border\">\n                                        <p>{book.volumeInfo.description ? book.volumeInfo.description : \"No Description Available for this Listing\"}</p>\n                                    </div>\n                                </div>\n                            </div>\n                        ))}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Search;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Search from \"./components/pages/Search.js\";\n\nconst App = () => (\n  <Router>\n    <Switch>\n      <Route exact path=\"/\" component={Search} />\n    </Switch>\n  </Router>\n)\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}